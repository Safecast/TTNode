Debugging DFU erase issue.

The issue appears to be a flow control issue, perhaps fleshing out a bug in one of
- serial.c
- app_uart_fifo.c
- app_fifo.c

The good news is that there is now odd behavior not only with the erase issue, but also during init when in the "wait:" when stuff freezes.

Step 0 should be to do ALL TESTING with no flow control.  With a sufficiently large fifo buffer (even 8k or 16k) we should
be able to 'catch up' from massive overrun because of the "while" loop in the uart event handler, and thus we can flesh out
any/all fifo bugs before turning hardware flow control back on and shrinking the buffers.  (It's not even clear that
hardware flow control buys us anything.  It very well could be that the fona will get genuine hardware overrun errors
if the nrf isn't ready to receive when it is ready to transmit.)

Step 1 should be to see why our code wont work WITHOUT app_uart_fifo.  In theory we do plenty of buffering, and our
interrupt handler is crazy short.

Step 1 should be to understand and fix the "wait:" bug.  They may not be the same.
- It could be that the flow control commands are simply not getting to the fona, and so
the fona is just getting confused in whether it's ok to send.
- But we keep getting into a state where the lights ARE flashing, indicating that the
stuff is getting to the serial handler, but nothing is coming out to the serial
- Then somehow at the end of the wait, the last buffer is flushed, and everything resumes.
- Hook a logic analyzer up and see what is happening.

After that is found/fixed, if it doesn't fix the erase bug, use GPIOs on some spare pin
to put stuff into app_uart_fifo and app_fifo just to see what is really happening
at a low level.
